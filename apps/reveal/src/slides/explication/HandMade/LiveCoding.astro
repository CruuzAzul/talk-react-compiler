---
import Slide from "../../../components/Slide.astro";
import SlideTitle from "../../../components/SlideTitle.astro";
import Ressource from "../../../components/Ressource.astro";
import SchemaArrow from "./SchemaArrow.astro";
import SchemaEnd from "./SchemaEnd.astro";
---

<Slide>
	<Slide>
		<SlideTitle
			title="Compilons à la main"
			punctuation=":"
			style={{
				margin: "auto",
				fontSize: "3rem",
				fontWeight: "bolder",
			}}
		/>
		<Ressource source="React without memo - Xuan Huang"/>
	</Slide>
	<Slide>
  <pre class="code-demo" data-id="code-animation">
		<code data-trim data-line-numbers>
			{`
				function TodoList({ visibility, themeColor }) {
					const [todos, setTodos] = useState(initialTodos);
					const handleChange = (todo) => setTodos(todos => getUpdated(todos, todo));
					const filteredTodos = getFiltered(todos, visibility);

					return (
						<div>
							<ul>
								{filteredTodos.map((todo) => (
									<Todo key={todo.id} todo={todo} onChange={handleChange} />
								))}
							</ul>
							<AddTodo setTodos={setTodos} themeColor={themeColor} />
						</div>
					);
				}
			`}
		</code>
	</pre>
		<SchemaArrow/>
	</Slide>
	<!-- Variables -->
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers>
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged;

						const handleChange = (todo) => setTodos(todos => getUpdated(todos, todo));

						const filteredTodos = getFiltered(todos, visibility);

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								<AddTodo setTodos={setTodos} themeColor={themeColor} />
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
	</Slide>
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="4">
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged;

						const handleChange = (todo) => setTodos(todos => getUpdated(todos, todo));

						const filteredTodos = getFiltered(todos, visibility);

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								<AddTodo setTodos={setTodos} themeColor={themeColor} />
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
	</Slide>
	<!-- filteredTodos -->
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="4,8">
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged;

						const handleChange = (todo) => setTodos(todos => getUpdated(todos, todo));

						const filteredTodos = getFiltered(todos, visibility);

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								<AddTodo setTodos={setTodos} themeColor={themeColor} />
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
	</Slide>
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="4, 8-10">
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged;

						const handleChange = (todo) => setTodos(todos => getUpdated(todos, todo));

						if (hasVisibilityChanged || hasTodosChanged) {
							const filteredTodos = getFiltered(todos, visibility);
						}

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								<AddTodo setTodos={setTodos} themeColor={themeColor} />
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
	</Slide>
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="4, 8-13">
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged;

						const handleChange = (todo) => setTodos(todos => getUpdated(todos, todo));

						let filteredTodos;
						if (hasVisibilityChanged || hasTodosChanged) {
							filteredTodos = getFiltered(todos, visibility);
						} else {
							filteredTodos = ????
						}

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								<AddTodo setTodos={setTodos} themeColor={themeColor} />
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
	</Slide>
	<!-- memoCache -->
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="4, 8-13">
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged, memoCache;

						const handleChange = (todo) => setTodos(todos => getUpdated(todos, todo));

						let filteredTodos;
						if (hasVisibilityChanged || hasTodosChanged) {
							filteredTodos = memoCache[1] = getFiltered(todos, visibility);
						} else {
							filteredTodos = memoCache[1];
						}

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								<AddTodo setTodos={setTodos} themeColor={themeColor} />
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
		<p style="text-shadow: 0 0 2px var(--primary-color); position: fixed; right: 350px; top: 70px">✨</p>
		<p data-id="filter"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 185px; top: 235px">
			✨</p>
	</Slide>
	<!-- handleChange -->
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="6">
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged, memoCache;

						const handleChange = (todo) => setTodos(todos => getUpdated(todos, todo));

						let filteredTodos;
						if (hasVisibilityChanged || hasTodosChanged) {
							filteredTodos = memoCache[1] = getFiltered(todos, visibility);
						} else {
							filteredTodos = memoCache[1];
						}

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								<AddTodo setTodos={setTodos} themeColor={themeColor} />
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
		<p data-id="filter"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 185px; top: 235px">
			✨</p>
	</Slide>
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="6-8" style={{fontSize: "0.7rem", lineHeight: "1.3rem"}}>
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged, memoCache;

						const handleChange =
							memoCache[0] ||
							(memoCache[0] = (todo) => setTodos(todos => getUpdated(todos, todo)));

						let filteredTodos;
						if (hasVisibilityChanged || hasTodosChanged) {
							filteredTodos = memoCache[1] = getFiltered(todos, visibility);
						} else {
							filteredTodos = memoCache[1];
						}

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								<AddTodo setTodos={setTodos} themeColor={themeColor} />
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
		<p data-id="filter"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 185px; top: 235px">
			✨</p>
		<p data-id="handleChange"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; top: 235px">
			✨</p>
	</Slide>
	<!-- jsx_addTodo -->
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="24" style={{fontSize: "0.7rem", lineHeight: "1.3rem"}}>
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged, memoCache;

						const handleChange =
							memoCache[0] ||
							(memoCache[0] = (todo) => setTodos(todos => getUpdated(todos, todo)));

						let filteredTodos;
						if (hasVisibilityChanged || hasTodosChanged) {
							filteredTodos = memoCache[1] = getFiltered(todos, visibility);
						} else {
							filteredTodos = memoCache[1];
						}

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								<AddTodo setTodos={setTodos} themeColor={themeColor} />
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
		<p data-id="filter"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 185px; top: 235px">
			✨</p>
		<p data-id="handleChange"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; top: 235px">
			✨</p>
	</Slide>
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="17-19, 28" style={{fontSize: "0.7rem", lineHeight: "1.3rem"}}>
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged, memoCache;

						const handleChange =
							memoCache[0] ||
							(memoCache[0] = (todo) => setTodos(todos => getUpdated(todos, todo)));

						let filteredTodos;
						if (hasVisibilityChanged || hasTodosChanged) {
							filteredTodos = memoCache[1] = getFiltered(todos, visibility);
						} else {
							filteredTodos = memoCache[1];
						}

						const jsx_addTodo = hasThemeColorChanged
						? (memoCache[3] = <AddTodo setTodos={setTodos} themeColor={themeColor} />)
						: memoCache[3];

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								{jsx_addTodo}
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
		<p data-id="filter"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 185px; top: 235px">
			✨</p>
		<p data-id="handleChange"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; top: 235px">
			✨</p>
		<p data-id="addTodo"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; bottom: 230px">
			✨</p>
	</Slide>
	<!-- jsx_todos -->
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="23-27" style={{fontSize: "0.7rem", lineHeight: "1.3rem"}}>
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged, memoCache;

						const handleChange =
							memoCache[0] ||
							(memoCache[0] = (todo) => setTodos(todos => getUpdated(todos, todo)));

						let filteredTodos;
						if (hasVisibilityChanged || hasTodosChanged) {
							filteredTodos = memoCache[1] = getFiltered(todos, visibility);
						} else {
							filteredTodos = memoCache[1];
						}

						const jsx_addTodo = hasThemeColorChanged
						? (memoCache[3] = <AddTodo setTodos={setTodos} themeColor={themeColor} />)
						: memoCache[3];

						return (
							<div>
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
								{jsx_addTodo}
							</div>
						);
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
		<p data-id="filter"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 185px; top: 235px">
			✨</p>
		<p data-id="handleChange"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; top: 235px">
			✨</p>
		<p data-id="addTodo"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; bottom: 230px">
			✨</p>

	</Slide>
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="10-23,29" style={{fontSize: "0.7rem", lineHeight: "1.3rem"}}>
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged, memoCache;

						const handleChange =
							memoCache[0] ||
							(memoCache[0] = (todo) => setTodos(todos => getUpdated(todos, todo)));

						let filteredTodos, jsx_todos;
						if (hasVisibilityChanged || hasTodosChanged) {
							filteredTodos = memoCache[1] = getFiltered(todos, visibility);
							jsx_todos = memoCache[2] = (
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
							);
						} else {
							filteredTodos = memoCache[1];
							jsx_todos = memoCache[2];
						}

						const jsx_addTodo = hasThemeColorChanged
						? (memoCache[3] = <AddTodo setTodos={setTodos} themeColor={themeColor} />)
						: memoCache[3];

						return <div>{jsx_todos}{jsx_addTodo}</div>;
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
		<p data-id="filter"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 185px; top: 235px">
			✨</p>
		<p data-id="handleChange"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; top: 235px">
			✨</p>
		<p data-id="addTodo"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; bottom: 230px">
			✨</p>
		<p data-id="jsxTodos"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 140px; bottom: 245px">
			✨</p>
	</Slide>
	<!-- TodoList -->
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers="6-29" style={{fontSize: "0.7rem", lineHeight: "1.3rem"}}>
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged, memoCache;

						const handleChange =
							memoCache[0] ||
							(memoCache[0] = (todo) => setTodos(todos => getUpdated(todos, todo)));

						let filteredTodos, jsx_todos;
						if (hasVisibilityChanged || hasTodosChanged) {
							filteredTodos = memoCache[1] = getFiltered(todos, visibility);
							jsx_todos = memoCache[2] = (
								<ul>
									{filteredTodos.map((todo) => (
										<Todo key={todo.id} todo={todo} onChange={handleChange} />
									))}
								</ul>
							);
						} else {
							filteredTodos = memoCache[1];
							jsx_todos = memoCache[2];
						}

						const jsx_addTodo = hasThemeColorChanged
						? (memoCache[3] = <AddTodo setTodos={setTodos} themeColor={themeColor} />)
						: memoCache[3];

						return <div>{jsx_todos}{jsx_addTodo}</div>;
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
		<p data-id="filter"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 185px; top: 235px">
			✨</p>
		<p data-id="handleChange"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; top: 235px">
			✨</p>
		<p data-id="addTodo"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; bottom: 230px">
			✨</p>
		<p data-id="jsxTodos"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 140px; bottom: 245px">
			✨</p>
	</Slide>
	<Slide>
		<pre class="code-demo" data-id="code-animation">
			<code data-trim data-line-numbers style={{fontSize: "0.7rem", lineHeight: "1.3rem"}}>
				{`
					function TodoList({ visibility, themeColor }) {
						const [todos, setTodos] = useState(initialTodos);

						let hasVisibilityChanged, hasThemeColorChanged, hasTodosChanged, memoCache;

						if (hasVisibilityChanged || hasThemeColorChanged || hasTodosChanged) {
							const handleChange =
							memoCache[0] ||
							(memoCache[0] = (todo) => setTodos(todos => getUpdated(todos, todo)));

							let filteredTodos, jsx_todos;
							if (hasVisibilityChanged || hasTodosChanged) {
								filteredTodos = memoCache[1] = getFiltered(todos, visibility);
								jsx_todos = memoCache[2] = (<ul>{filteredTodos.map(...)}</ul>);
							} else {
								filteredTodos = memoCache[1];
								jsx_todos = memoCache[2];
							}

							const jsx_addTodo = hasThemeColorChanged
							? (memoCache[3] = <AddTodo setTodos={setTodos} themeColor={themeColor} />)
							: memoCache[3];

							return (memoCache[4] = <div>{jsx_todos}{jsx_addTodo}</div>);
						} else {
							return memoCache[4];
						}
					}
				`}
			</code>
		</pre>
		<SchemaEnd/>
		<p data-id="filter"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 185px; top: 235px">
			✨</p>
		<p data-id="handleChange"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; top: 235px">
			✨</p>
		<p data-id="addTodo"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 10px; bottom: 230px">
			✨</p>
		<p data-id="jsxTodos"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 140px; bottom: 245px">
			✨</p>
		<p data-id="todosList"
			 style="text-shadow: 0 0 2px var(--primary-color); font-size: 2rem; position: fixed; right: 100px; bottom: 270px">
			✨</p>
	</Slide>
</Slide>

<style>
	.code-demo {
		position: absolute;
		left: -50px;
	}
</style>
